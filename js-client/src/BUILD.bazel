# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Instantiate the Bazel rules we use in this build file.
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@build_bazel_rules_nodejs//:defs.bzl", "history_server", "rollup_bundle")
load("@npm_bazel_typescript//:defs.bzl", "ts_config", "ts_devserver", "ts_library")
load("@build_bazel_rules_nodejs//internal/web_package:web_package.bzl", "web_package")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")

# The package rule declares this directory as a Bazel package
# which scopes targets defined in this Build file under this package.
# The visibility parameter declares which packages can call targets
# in this package. In this case, we're saying anyone can call these targets.
# See https://docs.bazel.build/versions/master/be/functions.html#package
package(default_visibility = ["//visibility:public"])

# Declare the Typescript config file that Bazel should pass
# to the Typescript compiler whenever we use it in our targets
# The ng_module rule below compiles Typescript.
# See https://github.com/bazelbuild/rules_typescript/blob/master/internal/ts_config.bzl
ts_config(
    name = "tsconfig-test",
    src = "tsconfig-test.json",
    deps = ["//js-client/src:tsconfig.json"],
)

# We don't import from these, but the generated ngfactory code will
NG_FACTORY_ADDED_IMPORTS = [
    "@npm//@angular/animations",
    "@npm//@angular/cdk",
    "@npm//@angular/material",
    "@npm//@angular/forms",
]


# We always strip these paths off the front of any assets we serve
_ROOT_DIRS = [
    "npm/node_modules/zone.js/dist",
    "npm/node_modules/@angular/material/prebuilt-themes",
    "npm/node_modules/@ngrx/store/bundles",
]

# Files that we serve in both development and production
_ASSETS = [
    # This label references an output of the "styles" sass_binary above.
    "//js-client/src/styles:main",
    "//js-client/src/images:image_assets",

    # Directly reference a file that came from @angular/material npm package
    "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",

    # We load zone.js outside the bundle. That's because it's a "pollyfill"
    # which speculates that such features might be available in a browser.
    # Also it's tricky to configure dead code elimination to understand that
    # zone.js is used, given that we don't have any import statement that
    # imports from it.
    "@npm//node_modules/zone.js:dist/zone.min.js",
]

# TODO what is this used for??
ts_library(
    name = "initialize_testbed",
    testonly = 1,
    srcs = [
        "initialize_testbed.ts",
    ],
    deps = [
        "@npm//@angular/core",
        "@npm//@angular/platform-browser-dynamic",
        "@npm//@types",
    ],
)

# Use Angular's ng tool to compile the source code into an NgModule
# It behaves the same as `ts_library` but with additional attributes
# See https://github.com/alexeagle/angular-bazel-example/wiki/Angular-rules#compiling-angular-templates
ng_module(
    name = "src",
    # the sourcefiles used to compile
    srcs = glob(
      include = ["*.ts", "**/*.ts"],
      exclude = [
          "**/*.spec.ts",
          "main.ts",
          "test.ts",
          "initialize_testbed.ts",
      ],
    ),
    # the HTML and Sass targets that output assets
    # we use in this module
    assets = [
        ":app.component.html",
        "//js-client/src/styles:main",
    ],
    # the tsconfig to pass to the typescript compiler
    tsconfig = ":tsconfig.json",
    # Other dependencies we need to compile this module
    deps = NG_FACTORY_ADDED_IMPORTS + [
        "//js-client/src/hello-world",
        "//js-client/src/material",
        "//js-client/src/todos",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
        "@npm//@angular/router",
        "@npm//@ngrx/store",
    ],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        ":rxjs_shims.js",
        "@npm//node_modules/rxjs:bundles/rxjs.umd.js",
    ],
)

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# UMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    # serve these files rooted at /
    additional_root_paths = _ROOT_DIRS,
    # Serve these files but don't inject tags for them into the index file
    # This might be because we only want to lazy-load these scripts on-demand,
    # or because they aren't compatible with Require.js so we must use a runtime
    # loader to load them.
    data = [
        "@npm//node_modules/@ngrx/store:bundles/store.umd.min.js",
    ],
    # Start from the development version of the main
    entry_module = "gke_bazel_example/js-client/src/main.dev",
    # <script> and <link> tags will be automatically injected into this index file
    index_html = "//js-client/src:assets",
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        "@npm//node_modules/tslib:tslib.js",
        ":rxjs_umd_modules",
        ":require.config.js",
        # We are manaully adding the bazel generated named-UMD date-fns bundle here as
        # named-UMD bundles for non-APF npm packages are not yet automatically added.
        # This file is generated by the npm_umd_bundle @npm//node_modules/date-fns:date-fns__umd
        # rule that is setup by yarn_install.
        "@npm//node_modules/date-fns:date-fns.umd.js",
    ],
    # Serve these files in addition to the JavaScript bundle
    # The corresponding <script> or <link> tags will be injected into the index_html
    static_files = _ASSETS,
    # Tell Bazel to build the sources first
    deps = ["//js-client/src"],
)


# This is a Bazel invocation of https://rollupjs.org
# where we can specify javascript sources to be minified and bundled into
# a single JS file.
# See https://bazelbuild.github.io/rules_nodejs/rollup/rollup_bundle.html
rollup_bundle(
    # the name of this target we call in both of the production server
    # targets below, as a dependency
    name = "bundle",
    # These Angular routes may be lazy-loaded at runtime.
    # So we tell Rollup that it can put them in separate JS chunks
    # (code-splitting) for faster application startup.
    # In the future, we could automatically gather these from statically
    # analyzing the Angular sources.
    additional_entry_points = [
        "js-client/src/hello-world/hello-world.module.ngfactory",
        "js-client/src/todos/todos.module.ngfactory",
    ],
    # the main class the bundle will execute upon load
    # (see source in js-client/src/main.prod.ts)
    entry_point = "js-client/src/main.prod",
    # what source files this rule depends on
    deps = [
        "//js-client/src",
        "@npm//@angular/common",
        "@npm//@angular/core",
        "@npm//@angular/material",
        "@npm//@angular/platform-browser",
        "@npm//@angular/router",
        "@npm//@ngrx/store",
        "@npm//rxjs",
    ],
)

filegroup(
    name = "assets",
    srcs = [
        "index.html",
    ],
)

web_package(
    name = "prodapp",
    additional_root_paths = _ROOT_DIRS + [
        # In production mode we also serve some polyfills
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist"
    ],
    # do not sort
    #assets = _ASSETS + [
    assets = [
        # This label references an output of the "styles" sass_binary above.
        "//js-client/src/styles:main",

        # Directly reference a file that came from @angular/material npm package
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",


        # We load zone.js outside the bundle. That's because it's a "pollyfill"
        # which speculates that such features might be available in a browser.
        # Also it's tricky to configure dead code elimination to understand that
        # zone.js is used, given that we don't have any import statement that
        # imports from it.
        "@npm//node_modules/zone.js:dist/zone.min.js",

        # For differential loading, we supply both an ESModule entry point and an es5 entry point
        # The injector will put two complimentary script tags in the index.html
        # do not sort
        ":bundle.min.js",
        ":bundle.min.es2015.js",
    ],
    data = [
        ":bundle",
        "favicon.ico",
        "//js-client/src/images:image_assets",
        "//js-client/src/styles:main",
        # Include polyfills that will be requested by old browsers
        "@npm//node_modules/systemjs:dist/system.js",
        "@npm//node_modules/core-js:client/core.min.js",
        "//js-client/src:assets",
    ],
    # <script> and <link> tags will be automatically injected into this index.
    index_html = "//js-client/src:assets",
)

# Run a production server with history-server
# This is only used when we want to run a production server locally
# The `nodejs_image` rule below is what we use in the k8s deployment
# See https://github.com/bazelbuild/rules_nodejs/blob/master/internal/history-server/history_server.bzl
# See this Bazel target exposed as a yarn script in `js-client/package.json`
history_server(
    name = "prodserver",
    data = [":prodapp"],

    templated_args = [
        "-a",
        "js-client/src/prodapp",
    ],
)

# Compile the Angular sources listed in "data",
# Expose node_modules for source dependencies
# The output of this rule is a Docker image
# when that image is run, it runs `nodejs {entrypoint}`
# See https://github.com/bazelbuild/rules_docker#nodejs_image
nodejs_image(
    # name of the target we call in `js-client/BUILD.bazel`
    # when we deploy to k8s
    name = "nodejs_image",
    # files, or Bazel targets that produce/move files, to build
    # or move into this image, to be made available when running
    # the application
    data = [":prodapp"],
    # what script nodejs should run when this image is run
    entry_point = "history-server/modules/cli.js",
    # which Bazel target should be called to generate our node_modules
    node_modules = "@history-server_runtime_deps//:node_modules",
    # these are the arguments passed to the entry_point when the
    # image is run. ex: `nodejs {entry_point} {templated_args}`
    # we set ours to "js-client/src/prodapp" because we want history-server
    # to serve from the js-client/src/prodapp directory.
    # See https://github.com/mjackson/history-server
    templated_args = ["js-client/src/prodapp"],
)

container_image(
    name = "angular_image",
    base = ":nodejs_image",
    # Actions created by this rule are I/O-bound,
    # so there is no benefit to running them remotely
    # tags = ["local"],
    workdir = "/app/js-client/src/nodejs_image.binary.runfiles/gke_bazel_example",
)
